name: Tagged Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  init_testing:
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Clippy check
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test

  tagged_release:
    name: Tagged Release
    needs:
      - init_testing
    runs-on: ubuntu-latest
    env:
      PROJECT_BIN_NAME: j
      ARTIFACT_DIR: /home/runner/work/path-jump/path-jump/target/release
    strategy:
      matrix:
        targets:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-unknown-linux-musl
          - x86_64-unknown-freebsd

    steps:
      - uses: actions/checkout@v2
      - name: Tag version
        id: tag_version
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Release build (${{ matrix.target }})
        uses: actions-rs/toolchain@v1
        with:
          command: build
          target: x86_64-unknown-linux-gnu
          args: --release --all-features
          override: true

      - name: Create artifact (${{ matrix.target }})
        uses: TheDoctor0/zip-release@master
        with:
          type: zip
          filename: ${{ env.PROJECT_BIN_NAME }}_${{ matrix.target }}.zip
          path: |
            target/release/${{ env.PROJECT_BIN_NAME }}
            target/release/${{ env.PROJECT_BIN_NAME }}.sh

      - name: Cargo clean
        uses: actions-rs/cargo@v1
        with:
          command: clean

      - name: Release artifacts
        uses: softprops/action-gh-release@v1
        env:
          TAG_VERSION: ${{ steps.tag_version.outputs.VERSION }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.TAG_VERSION }}
          prerelease: contains(env.TAG_VERSION, 'alpha') || contains(env.TAG_VERSION, 'beta')
          files: |
            ${{ env.PROJECT_BIN_NAME }}_${{ matrix.target }}.zip
          fail_on_unmatched_files: true
